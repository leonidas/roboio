#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from rataservice import rataservice
from rataservice.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   getvisualfeeds()'
  print '  bool setpreviewmatchingmode(previewmatchingmode modesettings)'
  print '  bool setVisualDataSource(VisualSourceRequest req)'
  print '   getDevices()'
  print '  string getCurrentDevice()'
  print '  bool setDevice(string devicename)'
  print '   gettempls()'
  print '  bool setfindtempl(string templ)'
  print '  bool savetempl(i32 id, Coordinate topleft, Coordinate bottomright, string name)'
  print '  bool savereference(i32 id, string name)'
  print '  bool locked()'
  print '  Response handleEvent(Event e)'
  print '  string getposition()'
  print '  bool setposition(RobotCoord coord)'
  print '  void reloaddutconfig(i16 dutindex)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = rataservice.Client(protocol)
transport.open()

if cmd == 'getvisualfeeds':
  if len(args) != 0:
    print 'getvisualfeeds requires 0 args'
    sys.exit(1)
  pp.pprint(client.getvisualfeeds())

elif cmd == 'setpreviewmatchingmode':
  if len(args) != 1:
    print 'setpreviewmatchingmode requires 1 args'
    sys.exit(1)
  pp.pprint(client.setpreviewmatchingmode(eval(args[0]),))

elif cmd == 'setVisualDataSource':
  if len(args) != 1:
    print 'setVisualDataSource requires 1 args'
    sys.exit(1)
  pp.pprint(client.setVisualDataSource(eval(args[0]),))

elif cmd == 'getDevices':
  if len(args) != 0:
    print 'getDevices requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDevices())

elif cmd == 'getCurrentDevice':
  if len(args) != 0:
    print 'getCurrentDevice requires 0 args'
    sys.exit(1)
  pp.pprint(client.getCurrentDevice())

elif cmd == 'setDevice':
  if len(args) != 1:
    print 'setDevice requires 1 args'
    sys.exit(1)
  pp.pprint(client.setDevice(args[0],))

elif cmd == 'gettempls':
  if len(args) != 0:
    print 'gettempls requires 0 args'
    sys.exit(1)
  pp.pprint(client.gettempls())

elif cmd == 'setfindtempl':
  if len(args) != 1:
    print 'setfindtempl requires 1 args'
    sys.exit(1)
  pp.pprint(client.setfindtempl(args[0],))

elif cmd == 'savetempl':
  if len(args) != 4:
    print 'savetempl requires 4 args'
    sys.exit(1)
  pp.pprint(client.savetempl(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'savereference':
  if len(args) != 2:
    print 'savereference requires 2 args'
    sys.exit(1)
  pp.pprint(client.savereference(eval(args[0]),args[1],))

elif cmd == 'locked':
  if len(args) != 0:
    print 'locked requires 0 args'
    sys.exit(1)
  pp.pprint(client.locked())

elif cmd == 'handleEvent':
  if len(args) != 1:
    print 'handleEvent requires 1 args'
    sys.exit(1)
  pp.pprint(client.handleEvent(eval(args[0]),))

elif cmd == 'getposition':
  if len(args) != 0:
    print 'getposition requires 0 args'
    sys.exit(1)
  pp.pprint(client.getposition())

elif cmd == 'setposition':
  if len(args) != 1:
    print 'setposition requires 1 args'
    sys.exit(1)
  pp.pprint(client.setposition(eval(args[0]),))

elif cmd == 'reloaddutconfig':
  if len(args) != 1:
    print 'reloaddutconfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.reloaddutconfig(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
