//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.VisualSource = {
'CAMTHREAD' : 0,
'IMAGE' : 1
};
ttypes.EventType = {
'KEYPRESS' : 1,
'MOUSECLICK' : 2
};
ttypes.Error = {
'NONE' : 0,
'LOCKED' : 1,
'OTHER' : 2
};
Coordinate = module.exports.Coordinate = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
Coordinate.prototype = {};
Coordinate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.x = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.y = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Coordinate.prototype.write = function(output) {
  output.writeStructBegin('Coordinate');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I16, 1);
    output.writeI16(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I16, 2);
    output.writeI16(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Point = module.exports.Point = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisualSourceRequest = module.exports.VisualSourceRequest = function(args) {
  this.source_type = null;
  this.param = null;
  if (args) {
    if (args.source_type !== undefined) {
      this.source_type = args.source_type;
    }
    if (args.param !== undefined) {
      this.param = args.param;
    }
  }
};
VisualSourceRequest.prototype = {};
VisualSourceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.source_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.param = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisualSourceRequest.prototype.write = function(output) {
  output.writeStructBegin('VisualSourceRequest');
  if (this.source_type !== null && this.source_type !== undefined) {
    output.writeFieldBegin('source_type', Thrift.Type.I32, 1);
    output.writeI32(this.source_type);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRING, 2);
    output.writeString(this.param);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RobotCoord = module.exports.RobotCoord = function(args) {
  this.x = null;
  this.y = null;
  this.z = null;
  this.alfa = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.z !== undefined) {
      this.z = args.z;
    }
    if (args.alfa !== undefined) {
      this.alfa = args.alfa;
    }
  }
};
RobotCoord.prototype = {};
RobotCoord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.z = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.alfa = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RobotCoord.prototype.write = function(output) {
  output.writeStructBegin('RobotCoord');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.z);
    output.writeFieldEnd();
  }
  if (this.alfa !== null && this.alfa !== undefined) {
    output.writeFieldBegin('alfa', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.alfa);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Image = module.exports.Image = function(args) {
  this.id = null;
  this.imagedata = null;
  this.height = null;
  this.width = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.imagedata !== undefined) {
      this.imagedata = args.imagedata;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
  }
};
Image.prototype = {};
Image.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imagedata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Image.prototype.write = function(output) {
  output.writeStructBegin('Image');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.imagedata !== null && this.imagedata !== undefined) {
    output.writeFieldBegin('imagedata', Thrift.Type.STRING, 2);
    output.writeString(this.imagedata);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I16, 3);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I16, 4);
    output.writeI16(this.width);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyPress = module.exports.KeyPress = function(args) {
  this.keyCode = null;
  this.character = null;
  if (args) {
    if (args.keyCode !== undefined) {
      this.keyCode = args.keyCode;
    }
    if (args.character !== undefined) {
      this.character = args.character;
    }
  }
};
KeyPress.prototype = {};
KeyPress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.keyCode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.character = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyPress.prototype.write = function(output) {
  output.writeStructBegin('KeyPress');
  if (this.keyCode !== null && this.keyCode !== undefined) {
    output.writeFieldBegin('keyCode', Thrift.Type.I16, 1);
    output.writeI16(this.keyCode);
    output.writeFieldEnd();
  }
  if (this.character !== null && this.character !== undefined) {
    output.writeFieldBegin('character', Thrift.Type.STRING, 2);
    output.writeString(this.character);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MouseClick = module.exports.MouseClick = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
MouseClick.prototype = {};
MouseClick.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.x = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.y = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MouseClick.prototype.write = function(output) {
  output.writeStructBegin('MouseClick');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I16, 1);
    output.writeI16(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I16, 2);
    output.writeI16(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Event = module.exports.Event = function(args) {
  this.frameId = null;
  this.type = null;
  this.keypress = null;
  this.click = null;
  if (args) {
    if (args.frameId !== undefined) {
      this.frameId = args.frameId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.keypress !== undefined) {
      this.keypress = args.keypress;
    }
    if (args.click !== undefined) {
      this.click = args.click;
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.frameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.keypress = new ttypes.KeyPress();
        this.keypress.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.click = new ttypes.MouseClick();
        this.click.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.frameId !== null && this.frameId !== undefined) {
    output.writeFieldBegin('frameId', Thrift.Type.I32, 1);
    output.writeI32(this.frameId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.keypress !== null && this.keypress !== undefined) {
    output.writeFieldBegin('keypress', Thrift.Type.STRUCT, 3);
    this.keypress.write(output);
    output.writeFieldEnd();
  }
  if (this.click !== null && this.click !== undefined) {
    output.writeFieldBegin('click', Thrift.Type.STRUCT, 4);
    this.click.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Response = module.exports.Response = function(args) {
  this.err = null;
  this.message = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.err = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.I32, 1);
    output.writeI32(this.err);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

previewmatchingmode = module.exports.previewmatchingmode = function(args) {
  this.enabled = null;
  this.topleft = null;
  this.bottomright = null;
  if (args) {
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.topleft !== undefined) {
      this.topleft = args.topleft;
    }
    if (args.bottomright !== undefined) {
      this.bottomright = args.bottomright;
    }
  }
};
previewmatchingmode.prototype = {};
previewmatchingmode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.topleft = new ttypes.Coordinate();
        this.topleft.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.bottomright = new ttypes.Coordinate();
        this.bottomright.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

previewmatchingmode.prototype.write = function(output) {
  output.writeStructBegin('previewmatchingmode');
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.topleft !== null && this.topleft !== undefined) {
    output.writeFieldBegin('topleft', Thrift.Type.STRUCT, 2);
    this.topleft.write(output);
    output.writeFieldEnd();
  }
  if (this.bottomright !== null && this.bottomright !== undefined) {
    output.writeFieldBegin('bottomright', Thrift.Type.STRUCT, 3);
    this.bottomright.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

visualfeed = module.exports.visualfeed = function(args) {
  this.content = null;
  this.updated = null;
  this.message = null;
  if (args) {
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
visualfeed.prototype = {};
visualfeed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new ttypes.Image();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.updated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

visualfeed.prototype.write = function(output) {
  output.writeStructBegin('visualfeed');
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 1);
    this.content.write(output);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.BOOL, 2);
    output.writeBool(this.updated);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

